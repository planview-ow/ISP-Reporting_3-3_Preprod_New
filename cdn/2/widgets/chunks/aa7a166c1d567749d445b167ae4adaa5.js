"use strict";(self.webpackChunkexb_client=self.webpackChunkexb_client||[]).push([[7284],{67284:(e,i,r)=>{r.r(i),r.d(i,{ServiceAreaTask:()=>g});var t=r(68230),o=r(38127),s=r(48920),n=r(8558),a=r(18886),l=r(67411),u=r(46275);const{solve:c}=o.default;let g=class{async execute(e,i,r){var t=a.U.string("url",e.url,a.U.never);const o=new s.default;return o.facilities=a.U.exists("facilities",e.facilities),o.accumulateAttributes=a.U.array("accumulateAttributes",e.accumulateAttributes),o.attributeParameterValues=a.U.exists("attributeParameterValues",e.attributeParameterValues,void 0),o.defaultBreaks=a.U.exists("defaultBreaks",e.defaultBreaks,void 0),o.excludeSourcesFromPolygons=a.U.exists("excludeSourcesFromPolygons",e.excludeSourcesFromPolygons,void 0),o.impedanceAttribute=a.U.string("impedanceAttribute",e.impedanceAttribute,void 0),o.impedanceAttribute||(o.impedanceAttribute=a.U.string("impedenceAttribute",e.impedenceAttribute,void 0)),o.mergeSimilarPolygonRanges=a.U.boolean("mergeSimilarPolygonRanges",e.mergeSimilarPolygonRanges,void 0),o.outputGeometryPrecision=a.U.number("outputGeometryPrecision",e.outputGeometryPrecision,void 0),o.outputGeometryPrecisionUnits=a.U.string("outputGeometryPrecisionUnits",e.outputGeometryPrecisionUnits,void 0),o.outputLines=a.U.string("outputLines",e.outputLines,void 0),o.outputPolygons=a.U.string("outputPolygons",e.outputPolygons,void 0),o.overlapLines=a.U.boolean("overlapLines",e.overlapLines,void 0),o.overlapPolygons=a.U.boolean("overlapPolygons",e.overlapPolygons,void 0),o.pointBarriers=a.U.exists("pointBarriers",e.pointBarriers,void 0),o.polygonBarriers=a.U.exists("polygonBarriers",e.polygonBarriers,void 0),o.polylineBarriers=a.U.exists("polylineBarriers",e.polylineBarriers,void 0),o.restrictionAttributes=a.U.exists("restrictionAttributes",e.restrictionAttributes,void 0),o.restrictUTurns=a.U.string("restrictUTurns",e.restrictUTurns,void 0),o.returnFacilities=a.U.boolean("returnFacilities",e.returnFacilities,void 0),o.returnPointBarriers=a.U.boolean("returnPointBarriers",e.returnPointBarriers,void 0),o.returnPolygonBarriers=a.U.boolean("returnPolygonBarriers",e.returnPolygonBarriers,void 0),o.returnPolylineBarriers=a.U.boolean("returnPolylineBarriers",e.returnPolylineBarriers,void 0),o.splitLinesAtBreaks=a.U.boolean("splitLinesAtBreaks",e.splitLinesAtBreaks,void 0),o.splitPolygonsAtBreaks=a.U.boolean("splitPolygonsAtBreaks",e.splitPolygonsAtBreaks,void 0),o.timeOfDay=a.U.exists("timeOfDay",e.timeOfDay,void 0),o.travelDirection=a.U.string("travelDirection",e.travelDirection,void 0),o.trimOuterPolygon=a.U.boolean("trimOuterPolygon",e.trimOuterPolygon,void 0),o.trimPolygonDistance=a.U.number("trimPolygonDistance",e.trimPolygonDistance,void 0),o.trimPolygonDistanceUnits=a.U.string("trimPolygonDistanceUnits",e.trimPolygonDistanceUnits,void 0),o.useHierarchy=a.U.boolean("useHierarchy",e.useHierarchy,void 0),e=a.U.exists("outSpatialReference",e.outSpatialReference,void 0),o.outSpatialReference=r.getOutSR(e),e={signal:i.cancellationToken.signal},e=c(t,o,e),(0,u.Iz)(i,e),{facilities:(e=await e).facilities,messages:e.messages,pointBarriers:e.pointBarriers,polygonBarriers:e.polygonBarriers,polylineBarriers:e.polylineBarriers,serviceAreaPolygons:e.serviceAreaPolygons,serviceAreaPolylines:e.serviceAreaPolylines}}};g.action="gcx:wf:arcgis::ServiceAreaTask",g.suite="gcx:wf:builtin",g=(0,t.gn)([(0,n.QZ)(l.I)],g)}}]);